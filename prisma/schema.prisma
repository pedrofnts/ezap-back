datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String
  supabase_uid   String          @unique
  password       String?
  phone          String?
  referral       String?
  profile        Profile?
  searches       Search[]
  jobViews       JobView[]
  favorites      JobFavorite[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Account        Account[]
  Session        Session[]
  subscription   Subscription?
  stripeCustomer StripeCustomer?
  asaasCustomer  AsaasCustomer?
}

model Profile {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  location         String?
  jobTitle         String?
  workMode         String?
  minSalary        Int?
  maxSalary        Int?
  notifications    Boolean  @default(true)
  notificationTime String   @default("instant")
  whatsappActive   Boolean  @default(true)
  phone            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Search {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id             Int           @id @default(autoincrement())
  searchId       Int
  search         Search        @relation(fields: [searchId], references: [id])
  cargo          String
  empresa        String
  cidade         String
  estado         String
  descricao      String        @db.Text
  url            String
  origem         String
  dataPublicacao DateTime?
  nivel          String?
  tipo           String
  salarioMinimo  Float?
  salarioMaximo  Float?
  isHomeOffice   Boolean       @default(false)
  isConfidential Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  views          JobView[]
  favorites      JobFavorite[]
}

model JobView {
  id        Int      @id @default(autoincrement())
  jobId     Int
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([jobId, userId])
}

model JobFavorite {
  id        Int      @id @default(autoincrement())
  jobId     Int
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([jobId, userId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, state])
}

model JobArea {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Planos disponíveis
model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String
  features      String[]
  price         Float
  interval      String // month, year
  billingCycle  String // weekly, monthly
  stripePriceId String? // ID do preço no Stripe
  asaasPlanId   String? // ID do plano no Asaas
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

// Assinatura central
model Subscription {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  planId            String
  provider          String
  status            String
  priceAmount       Float
  interval          String
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relacionamentos
  user               User                @relation(fields: [userId], references: [id])
  plan               Plan                @relation(fields: [planId], references: [id])
  stripeSubscription StripeSubscription?
  asaasSubscription  AsaasSubscription?
}

// Assinatura do Stripe
model StripeSubscription {
  id                   Int      @id @default(autoincrement())
  stripeSubscriptionId String   @unique
  customerId           Int
  status               String // PENDING, ACTIVE, CANCELLED
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relacionamentos
  customer     StripeCustomer @relation(fields: [customerId], references: [id])
  subscription Subscription   @relation(fields: [id], references: [id])
}

// Cliente do Stripe
model StripeCustomer {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  user          User                 @relation(fields: [userId], references: [id])
  subscriptions StripeSubscription[]
}

// Assinatura do Asaas
model AsaasSubscription {
  id                  Int      @id @default(autoincrement())
  asaasSubscriptionId String   @unique
  customerId          Int
  value               Float
  cycle               String
  status              String // PENDING, ACTIVE, CANCELLED
  nextDueDate         DateTime
  description         String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relacionamentos
  customer     AsaasCustomer  @relation(fields: [customerId], references: [id])
  subscription Subscription   @relation(fields: [id], references: [id])
  payments     AsaasPayment[]
}

// Cliente do Asaas
model AsaasCustomer {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  asaasCustomerId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  user          User                @relation(fields: [userId], references: [id])
  subscriptions AsaasSubscription[]
  payments      AsaasPayment[]
}

// Pagamento do Asaas
model AsaasPayment {
  id             Int      @id @default(autoincrement())
  asaasPaymentId String   @unique
  customerId     Int
  subscriptionId Int
  value          Float
  status         String
  billingType    String
  dueDate        DateTime
  invoiceUrl     String?
  pixQrCodeUrl   String?
  pixKey         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  customer     AsaasCustomer     @relation(fields: [customerId], references: [id])
  subscription AsaasSubscription @relation(fields: [subscriptionId], references: [id])
}
