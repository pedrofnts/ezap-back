datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String
  supabase_uid String        @unique
  password     String?
  phone        String?
  profile      Profile?
  searches     Search[]
  jobViews     JobView[]
  favorites    JobFavorite[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Account      Account[]
  Session      Session[]
}

model Profile {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  location         String?
  jobTitle         String?
  workMode         String?
  minSalary        Int?
  maxSalary        Int?
  notifications    Boolean  @default(true)
  notificationTime String   @default("instant")
  whatsappActive   Boolean  @default(true)
  phone            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Search {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id             Int           @id @default(autoincrement())
  searchId       Int
  search         Search        @relation(fields: [searchId], references: [id])
  cargo          String
  empresa        String
  cidade         String
  estado         String
  descricao      String        @db.Text
  url            String
  origem         String
  dataPublicacao DateTime?
  nivel          String?
  tipo           String
  salarioMinimo  Float?
  salarioMaximo  Float?
  isHomeOffice   Boolean       @default(false)
  isConfidential Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  views          JobView[]
  favorites      JobFavorite[]
}

model JobView {
  id        Int      @id @default(autoincrement())
  jobId     Int
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([jobId, userId])
}

model JobFavorite {
  id        Int      @id @default(autoincrement())
  jobId     Int
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([jobId, userId])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, state])
}

model JobArea {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
